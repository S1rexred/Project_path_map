import React, { useEffect, useState } from 'react';
import ymaps from 'ymaps';
import BuildRoute from '../routes/BuildRoute';
import { SearchCafes } from '../searchPlace/SearchCafes'

const MapComponent = () => {
    const [map, setMap] = useState(null);
    const [userCoords, setUserCoords] = useState(null);
    const [cafeCoords, setCafeCoords] = useState(null);
    const [userPlacemark, setUserPlacemark] = useState(null);
    const [isFirstLoad, setIsFirstLoad] = useState(true);
    const [routeReady, setRouteReady] = useState(false)

    useEffect(() => {
        if (map) return

        console.log('–°–æ–∑–¥–∞–µ—Ç—Å—è –∫–∞—Ä—Ç–∞')
        ymaps
            .load("https://api-maps.yandex.ru/2.1/?lang=ru_RU&apikey=3e97ca53-6fe6-4f83-92e8-625dc2b8f2c4")
            .then((ymapsInstance) => {
                const newMap = new ymapsInstance.Map("map", {
                    center: [46.200000, 48.000002],
                    zoom: 12,
                });

                newMap.events.add('boundsChange', () => {
                    const newCenter = newMap.getCenter()
                    console.log('—Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã –∏–∑–º–µ–Ω–∏–ª—Å—è')
                    SearchCafes(newCenter, newMap, setCafeCoords)
                })

                setMap(newMap);
            })
            .catch((err) => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç:", err));
    }, []);

    useEffect(() => {
        if (map && "geolocation" in navigator) {
            navigator.geolocation.getCurrentPosition((position) => {
                const coords = [position.coords.latitude, position.coords.longitude];
                setUserCoords(coords);
                console.log("üìç –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:", coords);

                ymaps.load().then((ymapsInstance) => {
                    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –º–µ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —É–¥–∞–ª—è–µ–º
                    if (userPlacemark) {
                        map.geoObjects.remove(userPlacemark);
                    }

                    const placemark = new ymapsInstance.Placemark(
                        coords,
                        { balloonContent: "–í—ã –∑–¥–µ—Å—å!" },
                        { draggable: true }
                    );

                    placemark.events.add("dragend", function () {
                        const newCoords = placemark.geometry.getCoordinates();
                        setUserCoords(newCoords);
                        console.log("üìç –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:", newCoords);
                        setRouteReady(false)
                        SearchCafes(newCoords, map, setCafeCoords)
                    });

                    map.geoObjects.add(placemark);
                    setUserPlacemark(placemark); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –º–µ—Ç–∫—É

                    if (isFirstLoad) {
                        map.setCenter(coords, 15);
                        setIsFirstLoad(false);
                    }

                    SearchCafes(coords, map, setCafeCoords);
                });
            });
        }
    }, [map]);

    const handleRouteReady = () => {
        setRouteReady(true)
        console.log("–Ω–æ–≤–∞—è –ø–æ–∑–∏—à–∏–Ω")
    }

    return (
        <div>
            <div id="map" style={{ width: "100%", height: "400px" }} />
            <button onClick={handleRouteReady} style={{marginTop: '10px', cursor: 'pointer', padding: '10px'}}>
                –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç
            </button>
            <button  style={{marginTop: '10px', cursor: 'pointer', padding: '10px'}}>
                –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
            </button>
            {map && userCoords && cafeCoords && routeReady && (
                <BuildRoute map={map} userCoords={userCoords} cafeCoords={cafeCoords} />
            )}
        </div>
    );
};

export default MapComponent;