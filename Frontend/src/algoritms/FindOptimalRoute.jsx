import ymaps from "ymaps";
/**
 * –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ—Å—Ç–∞.
 * @param {Array} userCoords - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [lat, lon].
 * @param {Array} places - –ú–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–µ—Å—Ç [[lat, lon], ...].
 * @returns {Array} - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ—Å—Ç–∞.
 */
export const getNearestPlace = (userCoords, places) => {
    if (!userCoords || !Array.isArray(places) || places.length === 0) return null;
    let nearestPlace = null;
    let minDistance = Infinity;
    places.forEach(place => {
        if (!place || place.length < 2) return; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        const distance = Math.hypot(
            userCoords[0] - place[0],
            userCoords[1] - place[1]
        );
        if (distance < minDistance) {
            minDistance = distance;
            nearestPlace = place;
        }
    });
    return nearestPlace;
};
/**
 * –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.
 * @param {Array} userCoords - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {Array} places - –ú–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–µ—Å—Ç.
 * @returns {Array} - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç.
 */
export const getOptimizedRoute = (userCoords, places) => {
    if (!Array.isArray(places) || places.length === 0) return [];
    let route = [];
    let currentCoords = userCoords;
    let remainingPlaces = [...places];
    while (remainingPlaces.length > 0) {
        let nearest = getNearestPlace(currentCoords, remainingPlaces);
        if (!nearest) break;
        route.push(nearest);
        currentCoords = nearest;
        // –£–¥–∞–ª—è–µ–º –ø–æ—Å–µ—â—ë–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º, –∞ –Ω–µ –ø–æ —Å—Å—ã–ª–∫–µ
        remainingPlaces = remainingPlaces.filter(place =>
            place[0] !== nearest[0] || place[1] !== nearest[1]
        );
    }
    return route;
};
/**
 * –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ.
 * @param {Array} userCoords - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {Array} places - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç.
 * @param {Object} map - –û–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã –Ø–Ω–¥–µ–∫—Å.
 */
export const FindOptimalRoute = (userCoords, places, map) => {
    if (!map || !userCoords || !Array.isArray(places) || places.length === 0) {
        console.warn("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö.");
        return;
    }

    // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º `places`, –∞ –Ω–µ `optimizedRoute`
    if (!Array.isArray(places) || places.length === 0) {
        console.warn("‚ö†Ô∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –ø—É—Å—Ç. –ú–∞—Ä—à—Ä—É—Ç –Ω–µ —Å—Ç—Ä–æ–∏—Ç—Å—è.");
        return;
    }

    console.log("üõ§Ô∏è –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑:", places);

    ymaps.load()
        .then((ymapsInstance) => {
            const multiRoute = new ymapsInstance.multiRouter.MultiRoute(
                {
                    referencePoints: [userCoords, ...places],
                    params: { routingMode: "pedestrian" },
                },
                { boundsAutoApply: true }
            );

            console.log("‚úÖ –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω");
            map.geoObjects.removeAll();
            map.geoObjects.add(multiRoute);
        })
        .catch((err) => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞:", err));
};
