import { SearchCafes } from "../searchPlace/SearchCafes";
import { SearchParks } from "../searchPlace/SearchParks";
import { SearchAttractions } from "../searchPlace/SearchAttractions";

export const FindOptimalRoute = (userCoords, map, setCafeCoords, setParkCoords, setAttractionsCoords) => {
    if (!userCoords || !map) return;

    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞...");

    Promise.all([
        new Promise((resolve, reject) => {
            console.log("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –∫–∞—Ñ–µ...");
            try {
                SearchCafes(userCoords, map, (cafes) => {
                    console.log("‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ñ–µ:", cafes);
                    if (!cafes || cafes.length === 0) {
                        console.warn("‚ùå –ö–∞—Ñ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
                        reject("–ö–∞—Ñ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
                        return;
                    }
                    resolve(cafes);
                });
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –≤ SearchCafes:", error);
                reject(error);
            }
        }),
        new Promise((resolve, reject) => {
            console.log("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –ø–∞—Ä–∫–æ–≤...");
            try {
                SearchParks(userCoords, map, (parks) => {
                    console.log("‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–∫–∏:", parks);
                    if (!parks || parks.length === 0) {
                        console.warn("‚ùå –ü–∞—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
                        reject("–ü–∞—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
                        return;
                    }
                    resolve(parks);
                });
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –≤ SearchParks:", error);
                reject(error);
            }
        })
    ])
    .then(([foundCafes, foundParks]) => {
        console.log("üîé –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞...");
        let bestCafe = null;
        let bestPark = null;
        let minDistance = Infinity;

        foundCafes.forEach((cafe) => {
            foundParks.forEach((park) => {
                const distance = calculateDistance(cafe, park);
                if (distance < minDistance) {
                    minDistance = distance;
                    bestCafe = cafe;
                    bestPark = park;
                }
            });
        });

        if (bestCafe && bestPark) {
            console.log(`‚úÖ –í—ã–±—Ä–∞–Ω–æ –∫–∞—Ñ–µ: ${JSON.stringify(bestCafe)}, –ø–∞—Ä–∫: ${JSON.stringify(bestPark)}`);
            setCafeCoords(bestCafe);
            setParkCoords(bestPark);

            SearchAttractions(bestPark, map, (attraction) => {
                if (attraction) {
                    console.log(`üèõÔ∏è –í—ã–±—Ä–∞–Ω–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${JSON.stringify(attraction)}`);
                    setAttractionsCoords(attraction);
                } else {
                    console.warn("‚ùå –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
                }
            });
        } else {
            console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—Ñ–µ –∏ –ø–∞—Ä–∫!");
        }
    })
    .catch((error) => console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞—Ñ–µ –∏–ª–∏ –ø–∞—Ä–∫–æ–≤:", error));
};

/**
 * –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (–ø–æ —Ñ–æ—Ä–º—É–ª–µ –•–∞–≤–µ—Ä—Å–∏–Ω–∞)
 */
const calculateDistance = (point1, point2) => {
    const toRad = (deg) => deg * (Math.PI / 180);
    const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º

    const dLat = toRad(point2[0] - point1[0]);
    const dLon = toRad(point2[1] - point1[1]);

    const a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(toRad(point1[0])) * Math.cos(toRad(point2[0])) *
        Math.sin(dLon / 2) * Math.sin(dLon / 2);

    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

    return R * c; // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º
};
