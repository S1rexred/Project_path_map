export const SearchParks = async (userCoords, map, setCafeCoords) => {
    if (!userCoords || !map) {
        console.warn("‚ö†Ô∏è –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–ª–∏ –∫–∞—Ä—Ç–∞!");
        return null;
    }

    console.log("üîé –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø–∞—Ä–∫–∞");

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
    map.controls.each((control) => {
        if (control instanceof window.ymaps.control.SearchControl) {
            map.controls.remove(control);
        }
    });

    const searchControl = new window.ymaps.control.SearchControl({
        options: {
            provider: "yandex#search",
            results: 1,
            boundedBy: [
                [userCoords[0] - 0.01, userCoords[1] - 0.01],
                [userCoords[0] + 0.01, userCoords[1] + 0.01]
            ]
        }
    });

    map.controls.add(searchControl);

    try {
        await searchControl.search("–ø–∞—Ä–∫");
        const results = searchControl.getResultsArray();

        if (!results || results.length === 0) {
            console.warn("‚ùå –ü–∞—Ä–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
            return null;
        }

        const nearestCafeCoords = results[0].geometry.getCoordinates();
        console.log("‚úÖ –ù–∞–π–¥–µ–Ω –±–ª–∏–∂–∞–π—à–∏–π –ø–∞—Ä–∫:", nearestCafeCoords);

        setCafeCoords(nearestCafeCoords);
        return nearestCafeCoords;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞—Ä–∫–∞:", error);
        return null;
    }
};
