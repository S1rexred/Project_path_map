import { SearchCafes } from "./SearchCafes";
import { SearchParks } from "./SearchParks";
import { SearchAttractions } from "./SearchAttractions";
import { getOptimizedRoute } from "../algorithms/FindOptimalRoute";

export const searchNearestPlaces = async (coords, map, setIsSearching, FindOptimalRoute, setCafeCoords, setParkCoords, setAttractionsCoords) => {
    if (!coords || !map) {
        console.warn("‚ö†Ô∏è –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–ª–∏ –∫–∞—Ä—Ç–∞!");
        return;
    }

    setIsSearching(true);
    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –º–µ—Å—Ç...");

    try {
        // 1Ô∏è‚É£ –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –∫–∞—Ñ–µ
        const cafeCoords = await SearchCafes(coords, map, setCafeCoords);
        if (!cafeCoords) {
            console.warn("‚ùå –ö–∞—Ñ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
            setIsSearching(false);
            return;
        }

        // 2Ô∏è‚É£ –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø–∞—Ä–∫ –æ—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–∞—Ñ–µ
        const parkCoords = await SearchParks(cafeCoords, map, setParkCoords);
        if (!parkCoords) {
            console.warn("‚ùå –ü–∞—Ä–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
            setIsSearching(false);
            return;
        }

        // 3Ô∏è‚É£ –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–∫–∞
        const attractionCoords = await SearchAttractions(parkCoords, map, setAttractionsCoords);
        if (!attractionCoords) {
            console.warn("‚ùå –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
            setIsSearching(false);
            return;
        }

        // ‚úÖ –í—Å–µ –º–µ—Å—Ç–∞ –Ω–∞–π–¥–µ–Ω—ã, —Å—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç
        const places = [cafeCoords, parkCoords, attractionCoords];
        console.log("üìç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:", places);

        const optimizedRoute = getOptimizedRoute(coords, places);
        console.log("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç:", optimizedRoute);

        FindOptimalRoute(coords, optimizedRoute, map);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ—á–µ–∫:", error);
    } finally {
        setIsSearching(false);
    }
};
